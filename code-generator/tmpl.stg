// SPDX-License-Identifier: MPL-2.0

import "task.stg"
import "robif2b.stg"
import "hddc2b.stg"
import "solver.stg"


define-variable(var) ::= <<
<({define-variable-<var.type>})(var)>
>>

call(closure) ::= <<
// <closure.id>
<({call-<closure.type>})(closure)>
>>

define-controller-variables(constraint_handler) ::= <<
<constraint_handler.controllers:{c | <define-variable(c)>;}; separator="\n">
>>

ip-lookup ::= [
    "slv_sc2_leftarm": "192.168.1.10",
    "slv_sc2_rightarm": "192.168.1.11"
]


robif2b-to-solver(solver) ::= <<
for (int i = 0; i \< num_jnts_<solver.id>; i++) {
    q_<solver.id>(i) = kinova_<solver.id>_state.pos_msr[i];
    qd_<solver.id>(i) = kinova_<solver.id>_state.vel_msr[i];
}

KDL::JntArrayVel q_qd_<solver.id>(q_<solver.id>, qd_<solver.id>);
>>


solver-to-robif2b(solver) ::= <<
for (int i = 0; i \< num_jnts_<solver.id>; i++) {
    kinova_<solver.id>_state.eff_cmd[i] = tau_ctrl_<solver.id>(i);
}
>>

kdl-to-hddc2b-f-platform(solver) ::= <<
f_platform[0] = <solver.force.id>.force.x();
f_platform[1] = <solver.force.id>.force.y();
f_platform[2] = <solver.force.id>.torque.z();
>>

hddc2b-to-kdl-xd-platform(solver) ::= <<
<solver.velocity.id>.vel.x(xd_platform[0]);
<solver.velocity.id>.vel.y(xd_platform[1]);
<solver.velocity.id>.rot.z(xd_platform[2]);
>>



application(slv_arm, slv_base_vel, slv_base_frc, cstr_hdl, data, views, closures, schedule) ::= <<
<robif2b-include-ethercat()>
<robif2b-include-kelo()>
<robif2b-include-kinova()>

<hddc2b-include()>

<solver-include()>

#include \<urdf_model/model.h\>
#include \<urdf_parser/urdf_parser.h\>
#include \<kdl_parser/kdl_parser.hpp\>

#include \<unistd.h\>

#include "chainhdsolver_vereshchagin_fext.hpp"

#define NUM_DRIVES 4
#define NUM_SLAVES 4
#define NUM_JOINTS 7

#define NUM_WHL_COORD  2
#define NUM_GND_COORD  2
#define NUM_DRV_COORD  2
#define NUM_PLTF_COORD 3
#define NUM_G_COORD    ((NUM_DRV_COORD) * (NUM_PLTF_COORD))
#define EPS            0.001


<robif2b-define-struct-ethercat()>

<robif2b-define-struct-kelo()>

<robif2b-define-struct-kinova()>


<task-define-struct-pid()>

<task-define-func-evaluator()>

<hddc2b-define-func-slv-vel()>

<hddc2b-define-func-rescale()>


int main()
{
    int num_drives = NUM_DRIVES;

    ecat_comm ecat_comm;
    <robif2b-define-ethercat-state()>

    <robif2b-define-ethercat()>

    <robif2b-define-kelo()>


    <slv_arm:{s | <robif2b-define-kinova-state(s.id)>}>

    <slv_arm:{s | <robif2b-define-kinova(s.id, ip-lookup.(s.id))>}>


    <hddc2b-define-kelo-kinematics()>

    <hddc2b-define-kelo-solver()>

    <hddc2b-define-kelo-force-solver()>

    <hddc2b-define-kelo-velocity-solver()>


    urdf::ModelInterfaceSharedPtr kinova_model = urdf::parseURDFFile("../GEN3_URDF_V12.urdf");
    KDL::Tree kinova_tree;
    kdl_parser::treeFromUrdfModel(*kinova_model, kinova_tree);
    KDL::Chain chain;
    kinova_tree.getChain("base_link", "Bracelet_Link", chain);


    <slv_arm:{s | <solver-define-state(s)>}; separator="\n">

    <data:{id | <define-variable(id)>;}; separator="\n">
    <cstr_hdl:{c | <define-controller-variables(c)>}; separator="\n">


    <robif2b-configure-ethercat()>
    <robif2b-start-ethercat()>
    <slv_arm:{s | <robif2b-configure-kinova(s.id)>}; separator="\n">
    <slv_arm:{s | <robif2b-recover-kinova(s.id)>}; separator="\n">
    <slv_arm:{s | <robif2b-start-kinova(s.id)>}; separator="\n">

    while (1) {
        <robif2b-update-ethercat()>
        <robif2b-update-kelo-encoder()>

        <hddc2b-call-g-solver()>

        <slv_base_vel:{s | <hddc2b-call-velocity-solver(s)>}; separator="\n">
        <slv_base_vel:{s | <hddc2b-to-kdl-xd-platform(s)>}; separator="\n">

        <slv_arm:{s | <robif2b-to-solver(s)>}; separator="\n">

        <slv_arm:{s | <s.output:{out | <solver-for-output(s, out)>}; separator="\n">}>

        <schedule:{s | <call(closures.(s))>;}; separator="\n">

        <slv_arm:{s | <solver-setup-and-call(s)>}; separator="\n">

        <slv_arm:{s | <solver-to-robif2b(s)>}; separator="\n">

        <slv_base_frc:{s | <kdl-to-hddc2b-f-platform(s)>}; separator="\n">
        <slv_base_frc:{s | <hddc2b-call-force-solver-sc1(s)>}; separator="\n">

        <robif2b-update-kelo-driver()>
        <slv_arm:{s | <robif2b-update-kinova(s.id)>}; separator="\n">

        usleep(1000);
    }

    <slv_arm:{s | <robif2b-stop-kinova(s.id)>}; separator="\n">
    <slv_arm:{s | <robif2b-shutdown-kinova(s.id)>}; separator="\n">
    <robif2b-stop-kelo-drive()>
    <robif2b-stop-ethercat()>
    <robif2b-shutdown-ethercat()>

    return 0;
}
>>
