// SPDX-License-Identifier: MPL-2.0

robif2b-include-ethercat() ::= <<
#include \<robif2b/functions/ethercat.h\>
>>

robif2b-define-struct-ethercat() ::= <<
struct ecat_state {
    const char   *ethernet_if;
    int          error_code;
    int          num_exposed_slaves;
    int          num_found_slaves;
    int          num_active_slaves;
    int          slave_idx[NUM_SLAVES];
    const char   *name[NUM_SLAVES];
    unsigned int prod_code[NUM_SLAVES];
    size_t       input_size[NUM_SLAVES];
    size_t       output_size[NUM_SLAVES];
    bool         is_connected[NUM_SLAVES];
};
>>

robif2b-define-ethercat-state() ::= <<
ecat_state ecat_state;
ecat_state.ethernet_if        = "net0";
ecat_state.num_exposed_slaves = NUM_SLAVES;
ecat_state.slave_idx[0]       = 3;
ecat_state.slave_idx[1]       = 4;
ecat_state.slave_idx[3]       = 6;
ecat_state.slave_idx[4]       = 7;

for (int i = 0; i \< NUM_DRIVES; i++) {
    ecat_state.name[i]        = "KELOD105";
    ecat_state.prod_code[i]   = 0x02001001;
    ecat_state.input_size[i]  = sizeof(ecat_comm.drv_msr_pdo[i]);
    ecat_state.output_size[i] = sizeof(ecat_comm.drv_cmd_pdo[i]);
}
>>

robif2b-define-ethercat() ::= <<
robif2b_ethercat ecat;
ecat.ethernet_if        = &ecat_state.ethernet_if[0];
ecat.num_exposed_slaves = &ecat_state.num_exposed_slaves;
ecat.slave_idx          = &ecat_state.slave_idx[0];
ecat.name               = &ecat_state.name[0];
ecat.product_code       = &ecat_state.prod_code[0];
ecat.input_size         = &ecat_state.input_size[0];
ecat.output_size        = &ecat_state.output_size[0];
ecat.error_code         = &ecat_state.error_code;
ecat.num_initial_slaves = &ecat_state.num_found_slaves;
ecat.num_current_slaves = &ecat_state.num_active_slaves;
ecat.is_connected       = &ecat_state.is_connected[0];
ecat.input = (void *[NUM_SLAVES]) {
    &ecat_comm.drv_msr_pdo[0],
    &ecat_comm.drv_msr_pdo[1],
    &ecat_comm.drv_msr_pdo[2],
    &ecat_comm.drv_msr_pdo[3]
};
ecat.output = (const void *[NUM_SLAVES]) {
    &ecat_comm.drv_cmd_pdo[0],
    &ecat_comm.drv_cmd_pdo[1],
    &ecat_comm.drv_cmd_pdo[2],
    &ecat_comm.drv_cmd_pdo[3]
};
>>

robif2b-configure-ethercat() ::= <<
robif2b_ethercat_configure(&ecat);
>>

robif2b-start-ethercat() ::= <<
robif2b_ethercat_start(&ecat);
>>

robif2b-update-ethercat() ::= <<
robif2b_ethercat_update(&ecat);
>>

robif2b-stop-ethercat() ::= <<
robif2b_ethercat_stop(&ecat);
>>

robif2b-shutdown-ethercat() ::= <<
robif2b_ethercat_shutdown(&ecat);
>>



robif2b-include-kelo() ::= <<
#include \<robif2b/functions/kelo_drive.h\>
>>

robif2b-define-struct-kelo() ::= <<
struct ecat_comm {
    robif2b_kelo_drive_api_msr_pdo drv_msr_pdo[NUM_DRIVES];
    robif2b_kelo_drive_api_cmd_pdo drv_cmd_pdo[NUM_DRIVES];
};

struct kelo_msr {
    double pvt_off[NUM_DRIVES];
    double pvt_pos[NUM_DRIVES];
    double pvt_vel[NUM_DRIVES];
    double whl_pos[NUM_DRIVES * 2];
    double whl_vel[NUM_DRIVES * 2];
    double imu_ang_vel[NUM_DRIVES * 3];
    double imu_lin_acc[NUM_DRIVES * 3];
    double bat_volt;
    double bat_cur;
    double bat_pwr;
    int    bat_lvl;
};

struct kelo_cmd {
    enum robif2b_ctrl_mode ctrl_mode[NUM_DRIVES];
    double vel[NUM_DRIVES * 2];
    double trq[NUM_DRIVES * 2];
    double cur[NUM_DRIVES * 2];
    double max_current[NUM_DRIVES * 2];
    double trq_const[NUM_DRIVES * 2];
};
>>

robif2b-define-kelo() ::= <<
kelo_msr kelo_msr;
kelo_msr.pvt_off[0] = 0.0;
kelo_msr.pvt_off[1] = 0.0;
kelo_msr.pvt_off[2] = 0.0;
kelo_msr.pvt_off[3] = 0.0;

robif2b_kelo_drive_encoder drive_enc;
drive_enc.num_drives    = &num_drives;
drive_enc.msr_pdo       = &ecat_comm.drv_msr_pdo[0];
drive_enc.wheel_pos_msr = &kelo_msr.whl_pos[0];
drive_enc.wheel_vel_msr = &kelo_msr.whl_vel[0];
drive_enc.pivot_pos_msr = &kelo_msr.pvt_pos[0];
drive_enc.pivot_vel_msr = &kelo_msr.pvt_vel[0];
drive_enc.pivot_pos_off = &kelo_msr.pvt_off[0];

kelo_cmd kelo_cmd;
for (int i = 0; i \< NUM_DRIVES; i++) {
    kelo_cmd.ctrl_mode[i]           = ROBIF2B_CTRL_MODE_FORCE,
    kelo_cmd.max_current[i * 2 + 0] = 10;     // [A]
    kelo_cmd.max_current[i * 2 + 1] = 10;     // [A]
    kelo_cmd.trq_const[i * 2 + 0]   = 0.29;   // [Nm/A]
    kelo_cmd.trq_const[i * 2 + 1]   = 0.29;   // [Nm/A]
}

robif2b_kelo_drive_actuator wheel_act = {
    .num_drives  = &num_drives,
    .cmd_pdo     = &ecat_comm.drv_cmd_pdo[0],
    .ctrl_mode   = &kelo_cmd.ctrl_mode[0],
    .act_vel_cmd = &kelo_cmd.vel[0],
    .act_trq_cmd = &kelo_cmd.trq[0],
    .act_cur_cmd = &kelo_cmd.cur[0],
    .max_current = &kelo_cmd.max_current[0],
    .trq_const   = &kelo_cmd.trq_const[0]
};
>>

robif2b-update-kelo-encoder() ::= <<
robif2b_kelo_drive_encoder_update(&drive_enc);
>>

robif2b-update-kelo-driver() ::= <<
robif2b_kelo_drive_actuator_update(&wheel_act);
>>

robif2b-stop-kelo-drive() ::= <<
robif2b_kelo_drive_actuator_stop(&wheel_act);
>>



robif2b-include-kinova() ::= <<
#include \<robif2b/functions/kinova_gen3.h\>
>>

robif2b-define-struct-kinova() ::= <<
struct kinova_state {
    bool success;
    enum robif2b_ctrl_mode ctrl_mode;
    double pos_msr[NUM_JOINTS];
    double vel_msr[NUM_JOINTS];
    double eff_msr[NUM_JOINTS];
    double cur_msr[NUM_JOINTS];
    double pos_cmd[NUM_JOINTS];
    double vel_cmd[NUM_JOINTS];
    double eff_cmd[NUM_JOINTS];
    double cur_cmd[NUM_JOINTS];
};
>>

robif2b-define-kinova-state(side) ::= <<
kinova_state kinova_<side>_state;
kinova_<side>_state.ctrl_mode = ROBIF2B_CTRL_MODE_FORCE;
kinova_<side>_state.success = false;
for (int i = 0; i \< NUM_JOINTS; i++) {
    kinova_<side>_state.pos_msr[i] = 0.0;
    kinova_<side>_state.vel_msr[i] = 0.0;
    kinova_<side>_state.eff_msr[i] = 0.0;
    kinova_<side>_state.cur_msr[i] = 0.0;
    kinova_<side>_state.pos_cmd[i] = 0.0;
    kinova_<side>_state.vel_cmd[i] = 0.0;
    kinova_<side>_state.eff_cmd[i] = 0.0;
    kinova_<side>_state.cur_cmd[i] = 0.0;
}
>>

robif2b-define-kinova(side, ip) ::= <<
robif2b_kinova_gen3_nbx kinova_<side>;
kinova_<side>.conf.ip_address         = "<ip>";
kinova_<side>.conf.port               = 10000;
kinova_<side>.conf.port_real_time     = 10001;
kinova_<side>.conf.user               = "admin";
kinova_<side>.conf.password           = "admin";
kinova_<side>.conf.session_timeout    = 60000;
kinova_<side>.conf.connection_timeout = 2000;
kinova_<side>.ctrl_mode = &kinova_<side>_state.ctrl_mode;
kinova_<side>.jnt_pos_msr = &kinova_<side>_state.pos_msr[0];
kinova_<side>.jnt_vel_msr = &kinova_<side>_state.vel_msr[0];
kinova_<side>.jnt_trq_msr = &kinova_<side>_state.eff_msr[0];
kinova_<side>.act_cur_msr = &kinova_<side>_state.cur_msr[0];
kinova_<side>.jnt_pos_cmd = &kinova_<side>_state.pos_cmd[0];
kinova_<side>.jnt_vel_cmd = &kinova_<side>_state.vel_cmd[0];
kinova_<side>.jnt_trq_cmd = &kinova_<side>_state.eff_cmd[0];
kinova_<side>.act_cur_cmd = &kinova_<side>_state.cur_cmd[0];
kinova_<side>.success = &kinova_<side>_state.success;
>>

robif2b-configure-kinova(side) ::= <<
robif2b_kinova_gen3_configure(&kinova_<side>);
>>

robif2b-recover-kinova(side) ::= <<
robif2b_kinova_gen3_recover(&kinova_<side>);
>>

robif2b-start-kinova(side) ::= <<
robif2b_kinova_gen3_start(&kinova_<side>);
>>

robif2b-update-kinova(side) ::= <<
robif2b_kinova_gen3_update(&kinova_<side>);
>>

robif2b-stop-kinova(side) ::= <<
robif2b_kinova_gen3_stop(&kinova_<side>);
>>

robif2b-shutdown-kinova(side) ::= <<
robif2b_kinova_gen3_shutdown(&kinova_<side>);
>>