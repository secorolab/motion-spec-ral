// SPDX-License-Identifier: MPL-2.0

import "kdl-config.stg"
import "chain.stg"


solver-include() ::= <<
#include \<kdl/frames.hpp\>
#include \<kdl/chain.hpp\>
#include \<kdl/jacobian.hpp\>
#include \<kdl/jntarray.hpp\>
#include \<kdl/chainfksolverpos_recursive.hpp\>
#include \<kdl/chainfksolvervel_recursive.hpp\>
#include \<kdl/chainhdsolver_vereshchagin.hpp\>
>>


solver-for-output-Pose(solver, out) ::= <<
KDL::ChainFkSolverPos_recursive fpk_<out.id>(chain);
fpk_<out.id>.JntToCart(q_<solver.id>, <out.id>, <frame-to-index.(out.of.id)>);
>>

solver-for-output-VelocityTwist(solver, out) ::= <<
KDL::ChainFkSolverVel_recursive fvk_<out.id>(chain);
KDL::FrameVel _<out.id>;
fvk_<out.id>.JntToCart(q_qd_<solver.id>, _<out.id>, <link-to-index.(out.of.id)>);
<out.id> = _<out.id>.deriv();
>>

solver-for-output(solver, out) ::= <<
<({solver-for-output-<out.type>})(solver, out)>
>>


num-cstr(cstr) ::= <<
<length(cstr.constraints)>
>>

constraint-force(cstr) ::= <<
<subspace-to-jacobian-offset.(cstr.subspace)> * 3 + <axis-to-index.(cstr.axis)>
>>

solver-assign-f-cstr(solver, cstr) ::= <<
<cstr.constraints:{c | f_cstr_<solver.id>(<constraint-force(c)>, <i0>) = 1.0;}; separator="\n">
>>

solver-assign-e-acc(solver, cstr) ::= <<
<cstr.constraints:{c | e_acc_<solver.id>(<i0>) = <c.acceleration_energy.id>;}; separator="\n">
>>

solver-zero-f-ext(solver, f) ::= <<
KDL::SetToZero(f_ext_<solver.id>[<link-to-index.(f.attached_to.id)>])
>>

solver-assign-f-ext(solver, f) ::= <<
f_ext_<solver.id>[<link-to-index.(f.attached_to.id)>] += <f.force.id>
>>



solver-define-state(solver) ::= <<
const int num_cstr_<solver.id> = <num-cstr(first(solver.motion_drivers.acceleration_constraint))>;
const int num_jnts_<solver.id> = chain.getNrOfJoints();
const int num_segs_<solver.id> = chain.getNrOfSegments();

KDL::Twist root_acc_<solver.id>;
KDL::JntArray q_<solver.id>(num_jnts_<solver.id>);
KDL::JntArray qd_<solver.id>(num_jnts_<solver.id>);
KDL::JntArray qdd_<solver.id>(num_jnts_<solver.id>);
KDL::JntArray tau_ff_<solver.id>(num_jnts_<solver.id>);
KDL::JntArray tau_ctrl_<solver.id>(num_jnts_<solver.id>);
KDL::Wrenches f_ext_<solver.id>(num_segs_<solver.id>);
KDL::Jacobian f_cstr_<solver.id>(num_cstr_<solver.id>);
KDL::JntArray e_acc_<solver.id>(num_cstr_<solver.id>);
KDL::ChainHdSolver_Vereshchagin_Fext achd_fext_<solver.id>(chain, root_acc_<solver.id>, num_cstr_<solver.id>);
KDL::ChainHdSolver_Vereshchagin achd_acc_<solver.id>(chain, root_acc_<solver.id>, num_cstr_<solver.id>);
>>


solver-setup-and-call(solver) ::= <<
<solver-assign-f-cstr(solver, first(solver.motion_drivers.acceleration_constraint))>
<solver-assign-e-acc(solver, first(solver.motion_drivers.acceleration_constraint))>

<solver.motion_drivers.cartesian_force:{f | <solver-zero-f-ext(solver, f)>;}; separator="\n">
<solver.motion_drivers.cartesian_force:{f | <solver-assign-f-ext(solver, f)>;}; separator="\n">

KDL::JntArray _tau_ctrl_fext_<solver.id>(num_jnts_<solver.id>);
achd_fext_<solver.id>.CartToJnt(q_<solver.id>, qd_<solver.id>, qdd_<solver.id>, f_cstr_<solver.id>, e_acc_<solver.id>, f_ext_<solver.id>, tau_ff_<solver.id>, _tau_ctrl_fext_<solver.id>);

KDL::Wrenches _f_ext_zero_<solver.id>(num_segs_<solver.id>);
KDL::JntArray _tau_ctrl_acc_<solver.id>(num_jnts_<solver.id>);
achd_acc_<solver.id>.CartToJnt(q_<solver.id>, qd_<solver.id>, qdd_<solver.id>, f_cstr_<solver.id>, e_acc_<solver.id>, _f_ext_zero_<solver.id>, tau_ff_<solver.id>, _tau_ctrl_acc_<solver.id>);

KDL::Add(_tau_ctrl_fext_<solver.id>, _tau_ctrl_acc_<solver.id>, tau_ctrl_<solver.id>);
>>