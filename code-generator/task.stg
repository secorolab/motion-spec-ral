// SPDX-License-Identifier: MPL-2.0

import "kdl-config.stg"
import "chain.stg"


mat-transpose(c1, c2, c3) ::= <<
<c1,c2,c3:{a, b, c | <a>, <b>, <c>}; separator=",\n">
>>

mat(c1, c2, c3) ::= <<
<vec(c1)>,
<vec(c2)>,
<vec(c3)>
>>

vec(v) ::= <<
<v; separator=", ">
>>


init-rotation(var) ::= <<
KDL::Rotation(
    <mat-transpose(var.direction_cosine_x, var.direction_cosine_y, var.direction_cosine_z)>)
>>

init-vector(var) ::= <<
KDL::Vector(<vec(var.position)>)
>>

init-frame(var) ::= <<
<if (var.direction_cosine_x && var.direction_cosine_y && var.direction_cosine_z && var.position)>
    = KDL::Frame(
        <init-rotation(var)>,
        <init-vector(var)>)<endif>
>>



task-define-struct-pid() ::= <<
class pid {
    public:
        pid(double p_gain, double i_gain, double d_gain, double decay_rate = 0.0) {
            err_integ = 0.0;
            err_last = 0.0;
            kp = p_gain;
            ki = i_gain;
            kd = d_gain;
            this->decay_rate = decay_rate;
        }

        double control(double error) {
            double err_diff = error - err_last;

            err_integ = decay_rate * err_integ + (1.0 - decay_rate) * error;
            err_last = error;

            return kp * error + ki * err_integ + kd * err_diff;
        }

    public:
        double err_integ;
        double err_last;
        double kp;
        double ki;
        double kd;
        double decay_rate;
};
>>



task-define-func-evaluator() ::= <<
double evaluate_equality_constraint(double quantity, double reference) {
    return quantity - reference;
}

double evaluate_less_than_constraint(double quantity, double threshold) {
    return (quantity \< threshold) ? 0.0 : threshold - quantity;
}

double evaluate_greater_than_constraint(double quantity, double threshold) {
    return (quantity \> threshold) ? 0.0 : quantity - threshold;
}

double evaluate_bilateral_constraint(double quantity, double lower, double upper) {
    if (quantity \< lower) return lower - quantity;
    else if (quantity \> upper) return quantity - upper;
    else return 0.0;
}
>>



define-variable-Direction(var) ::= <<
KDL::Vector <var.id>
>>

define-variable-Pose(var) ::= <<
KDL::Frame <var.id><init-frame(var)>
>>

define-variable-Position(var) ::= <<
KDL::Vector <var.id>(<init-vector(var)>)
>>

define-variable-VelocityTwist(var) ::= <<
KDL::Twist <var.id>
>>

define-variable-AccelerationTwist(var) ::= <<
KDL::Twist <var.id>
>>

define-variable-Wrench(var) ::= <<
KDL::Wrench <var.id>
>>

define-variable-Quantity-NoView(var) ::= <<
double <var.id><if (var.value)> = <var.value><endif>
>>

define-variable-Quantity-View(var, view) ::= <<
double &<var.id> = <view.superobject.id>.<subspace.(view.subspace)>[<axis-to-index.(view.axis)>]
>>

define-variable-Quantity(var) ::= <<
<if (var.has_view)><define-variable-Quantity-View(var, views.(var.id))><else><define-variable-Quantity-NoView(var)><endif>
>>

define-variable-Controller(var) ::= <<
pid <var.id>(<var.proportional_gain>, <var.integral_gain>, <var.derivative_gain><if (var.decay_rate)>, <var.decay_rate><endif>)
>>







call-AssignmentEvaluator(closure) ::= <<
<closure.quantity> = <closure.reference_value>
>>

call-ErrorEvaluator-EqualityConstraint(closure) ::= <<
<closure.error> = evaluate_equality_constraint(<closure.quantity>, <closure.reference_value>)
>>

call-ErrorEvaluator-GreaterThanConstraint(closure) ::= <<
<closure.error> =  evaluate_greater_than_constraint(<closure.quantity>, <closure.threshold>)
>>

call-ErrorEvaluator-LessThanConstraint(closure) ::= <<
<closure.error> =  evaluate_less_than_constraint(<closure.quantity>, <closure.threshold>)
>>

call-ErrorEvaluator-BilateralConstraint(closure) ::= <<
<closure.error> = evaluate_bilateral_constraint(<closure.quantity>, <closure.lower_threshold>, <closure.upper_threshold>)
>>

call-ErrorEvaluator(closure) ::= <<
<({call-ErrorEvaluator-<closure.constraint>})(closure)>
>>

call-Controller(closure) ::= <<
<closure.control_signal> = <closure.id>.control(<closure.error_signal>)
>>

call-PlanarAngleFromDirections(closure) ::= <<
<closure.angle> = KDL::dot(<closure.from_directions:{d | <d>}; separator=", ">)
>>

call-InvertAngle(closure) ::= <<
<closure.out> = -<closure.in>
>>

call-RotateDirectionDistalToProximalWithPose(closure) ::= <<
<closure.to> = <closure.pose>.M * <closure.from>
>>

call-ComposePose(closure) ::= <<
<closure.composite> = <closure.in1> * <closure.in2>
>>

call-PoseToLinearDistance(closure) ::= <<
<closure.distance> = <closure.pose>.p.Norm()
>>

call-PoseToDirection(closure) ::= <<
<closure.direction> = <closure.pose>.p;
<closure.direction>.Normalize()
>>

call-PoseToAngleAroundAxis(closure) ::= <<
KDL::Vector _<closure.angle> = <axis-to-vector.(closure.axis)>;
<closure.angle> = <closure.pose>.M.GetRotAngle(_<closure.angle>)
>>

call-RotateVelocityTwistToProximalWithPose(closure) ::= <<
<closure.to> = <closure.pose>.M * <closure.from>
>>

call-WrenchFromPositionDirectionAndMagnitude(closure) ::= <<
<closure.wrench> = KDL::Wrench(<closure.direction> * <closure.magnitude>, KDL::Vector(0.0, 0.0, 0.0)).RefPoint(-<closure.position>)
>>

call-RotateWrenchToDistalWithPose(closure) ::= <<
<closure.to> = <closure.pose>.M.Inverse(<closure.from>)
>>

call-RotateWrenchToProximalWithPose(closure) ::= <<
<closure.to> = <closure.pose>.M * <closure.from>
>>

call-TransformWrenchToProximal(closure) ::= <<
<closure.to> = <closure.pose> * <closure.from>
>>

call-AddWrench(closure) ::= <<
<closure.out> = <closure.in1> + <closure.in2>
>>