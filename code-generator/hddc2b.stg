// SPDX-License-Identifier: MPL-2.0

hddc2b-include() ::= <<
#include \<hddc2b/functions/platform.h\>
#include \<hddc2b/functions/solver.h\>
#include \<hddc2b/functions/drive.h\>
#include \<hddc2b/functions/wheel.h\>
>>



hddc2b-define-func-rescale() ::= <<
void hddc2b_rescale(double *f_scnd) {
    // Find the greatest, absolute nullspace force considering only the "lateral"/y direction
    double f_scnd_max = 0.0;
    for (int i = 0; i \< NUM_DRIVES; i++) {
        double current = fabs(f_scnd[i * NUM_DRV_COORD + 1]);
        if (current > f_scnd_max) f_scnd_max = current;
    }

    // The scale factor is either the maximum force from before or a unit factor
    double scale_factor = (f_scnd_max == 0.0) ? 1.0 : f_scnd_max;

    // Perform the actual rescaling
    for (int i = 0; i \< NUM_DRIVES; i++) {
        f_scnd[i * NUM_DRV_COORD + 0] /= scale_factor;
        f_scnd[i * NUM_DRV_COORD + 1] /= scale_factor;
    }
}
>>


hddc2b-define-func-slv-vel() ::= <<
void hddc2b_pltf_vel_drv_to_pltf(
        int num_drv,
        double eps,
        const double *g,
        const double *w_drv_sqrt,
        const double *xd_drv,
        const double *w_pltf_inv_sqrt,
        double *xd_pltf)
{
    assert(num_drv >= 0);

    double g2[num_drv * NUM_G_COORD];
    double xd_drv2[num_drv * NUM_DRV_COORD];
    hddc2b_pltf_vel_sing_wgh(num_drv, g, xd_drv, w_drv_sqrt, g2, xd_drv2);

    double g3[num_drv * NUM_G_COORD];
    hddc2b_pltf_vel_redu_wgh_init(num_drv, g2, w_pltf_inv_sqrt, g3);

    double u[NUM_PLTF_COORD * NUM_PLTF_COORD];
    double s[NUM_PLTF_COORD];
    double vt[num_drv * NUM_G_COORD];
    hddc2b_pltf_dcmp(num_drv, g3, u, s, vt);

    double s_inv[NUM_PLTF_COORD];
    hddc2b_pltf_pinv(num_drv, eps, s, s_inv);

    double xd_pltf2[NUM_PLTF_COORD];
    hddc2b_pltf_vel_slv(num_drv, u, s_inv, vt, xd_drv2, xd_pltf2);

    hddc2b_pltf_vel_redu_wgh_fini(num_drv, xd_pltf2, w_pltf_inv_sqrt, xd_pltf);
}
>>


hddc2b-define-kelo-kinematics() ::= <<
// Attachment position of each drive unit w.r.t. the platform's origin.
// The values here originate from the KELO Robotics DT500 platform.
double drive_attachment[NUM_DRIVES * 2] = {             // [m]
     0.195,  0.21,                                      // fl-x, fl-y
    -0.195,  0.21,                                      // rl-x, rl-y
    -0.195, -0.21,                                      // rr-x, rr-y
     0.195, -0.21                                       // fr-x, fr-y
};

// Diameter of each wheel.
double wheel_diameter[NUM_DRIVES * 2] = {               // [m]
    0.115, 0.115,                                       // fl-r, fl-l
    0.115, 0.115,                                       // rl-r, rl-l
    0.115, 0.115,                                       // rr-r, rr-l
    0.115, 0.115                                        // fr-r, fr-l
};

// Kinematic parameters of the differential drive part:
// Distance of the wheels from the centre between the wheels.
double wheel_distance[NUM_DRIVES] = {                   // [m]
    0.0775, 0.0775, 0.0775, 0.0775                      // fl, rl, rr, fr
};

// Kinematic parameters of the castor drive part:
// Distance of the axle from the pivot joint's axis
double castor_offset[NUM_DRIVES] = {                    // [m]
    0.01, 0.01, 0.01, 0.01                              // fl, rl, rr, fr
};
>>


hddc2b-define-kelo-solver() ::= <<
// Force composition matrix (from drive forces to platform force)
double g[NUM_DRIVES * NUM_G_COORD];
>>


hddc2b-define-kelo-force-solver() ::= <<
// The actually desired platform-level force.
double f_platform[NUM_PLTF_COORD] = {                   // [N], [N], [Nm]
    0.0, 0.0, 0.0                                       // x, y, mz
};

// For _singular_ platforms the relative weight between the platform-level
// forces, i.e. for the platform in this example it has no impact on the
// force distribution.
double w_platform[NUM_PLTF_COORD * NUM_PLTF_COORD] = {
    // [1/N^2], [1/(N Nm)], [1/(Nm)^2]
    1.0, 0.0, 0.0,                                      // xx, xy, xm
    0.0, 1.0, 0.0,                                      // yx, yy, ym
    0.0, 0.0, 1.0                                       // mx, my, mm
};

// For _redundant_ platforms the relative weight between the drive-level
// forces. The entries here disable the front-right drive unit.
double w_drive[NUM_DRIVES * 4] = {                      // [1/N^2]
    1.0, 0.0, 0.0, 1.0,                                 // fl-xx, fl-xy, fl-yx, fl-yy
    1.0, 0.0, 0.0, 1.0,                                 // rl-xx, rl-xy, rl-yx, rl-yy
    1.0, 0.0, 0.0, 1.0,                                 // rr-xx, rr-xy, rr-yx, rr-yy
    1.0, 0.0, 0.0, 1.0                                  // fr-xx, fr-xy, fr-yx, fr-yy
};

// Reference drive forces that will
// (i) be computed from the "misalignment" of the drive units w.r.t. the
//     platform-level task; and
// (ii) projected into the nullspace of the platform-level task.
double f_drive_ref[NUM_DRIVES * NUM_DRV_COORD] = {
    0.0, 0.0,                                           // fl-x, fl-y
    0.0, 0.0,                                           // rl-x, rl-y
    0.0, 0.0,                                           // rr-x, rr-y
    0.0, 0.0                                            // fr-x, fr-y
};

// Weight of the angular and linear alignment distance, respectively.
// The weight for the front-right drive unit means that it will always have
// a "zero" alignment distance.
double w_align[NUM_DRIVES * 2] = {
    1.0, 1.0,                                           // fl-ang, fl-lin
    1.0, 1.0,                                           // rl-ang, rl-lin
    1.0, 1.0,                                           // rr-ang, rr-lin
    1.0, 1.0                                            // fr-ang, fr-lin
};

// Drive force that results from distributing the platform-level force
double f_drive[NUM_DRIVES * NUM_DRV_COORD];             // [N]
bzero(f_drive, NUM_DRIVES * NUM_GND_COORD * sizeof(double));

// Force at the wheel-ground contact point
double f_wheel[NUM_DRIVES * NUM_GND_COORD];             // [N]

// Drive forces associated with the primary and secondary (nullspace) task
double f_prim[NUM_DRIVES * NUM_DRV_COORD];              // [N]
double f_scnd[NUM_DRIVES * NUM_DRV_COORD];              // [N]
>>


hddc2b-define-kelo-velocity-solver() ::= <<
double xd_ground[NUM_DRIVES * NUM_DRV_COORD];           // [m/s], [m/s]
double xd_drive[NUM_DRIVES * NUM_DRV_COORD];            // [m/s], [m/s]
double xd_platform[NUM_PLTF_COORD];                     // [m/s], [m/s], [rad/s]
>>


hddc2b-call-g-solver() ::= <<
hddc2b_pltf_frc_comp_mat(NUM_DRIVES, drive_attachment, kelo_msr.pvt_pos, g);
>>


hddc2b-call-force-solver-hddc2b_example_frc_sc1(solver) ::= <<
hddc2b_pltf_drv_algn_dst(NUM_DRIVES, drive_attachment, w_align, kelo_msr.pvt_pos, f_platform, &f_drive_ref[1], 2);
hddc2b_pltf_frc_pltf_to_drv(NUM_DRIVES, EPS, g, w_platform, f_platform, w_drive, f_drive_ref, f_prim, f_scnd);
hddc2b_rescale(f_scnd);
hddc2b_pltf_frc_redu_ref_fini(NUM_DRIVES, f_prim, f_scnd, f_drive);
hddc2b_drv_frc_pvt_to_gnd(NUM_DRIVES, wheel_distance, castor_offset, f_drive, f_wheel);
hddc2b_whl_frc_gnd_to_hub(NUM_DRIVES, wheel_diameter, f_wheel, kelo_cmd.trq);
>>


hddc2b-call-force-solver-hddc2b_example_frc_sc2(solver) ::= <<
hddc2b_pltf_drv_algn_dst(NUM_DRIVES, drive_attachment, w_align, kelo_msr.pvt_pos, f_platform, &f_drive[1], 2);
hddc2b_drv_frc_pvt_to_gnd(NUM_DRIVES, wheel_distance, castor_offset, f_drive, f_wheel);
hddc2b_whl_frc_gnd_to_hub(NUM_DRIVES, wheel_diameter, f_wheel, kelo_cmd.trq);
>>

hddc2b-call-force-solver(solver) ::= <<
<({hddc2b-call-force-solver-<solver.configuration>})(solver)>
>>


hddc2b-call-velocity-solver(solver) ::= <<
hddc2b_whl_vel_hub_to_gnd(NUM_DRIVES, wheel_diameter, kelo_msr.whl_vel, xd_ground);
hddc2b_drv_vel_gnd_to_pvt(NUM_DRIVES, wheel_distance, castor_offset, xd_ground, xd_drive);
hddc2b_pltf_vel_drv_to_pltf(NUM_DRIVES, EPS, g, w_drive, xd_drive, w_platform, xd_platform);
>>
